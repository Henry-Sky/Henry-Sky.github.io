[{"title":"操作系统复习","url":"/2023/05/26/op-test/","content":"针对期末考试的复习资料第一章\n操作系统的定义：操作系统是一种系统软件，它管理和控制计算机硬件资源，并为用户和应用程序提供一个接口。它是计算机系统中最基本的软件层，负责协调和管理计算机的各种硬件和软件资源，以提供有效、可靠、安全和方便的计算机环境。\n\n操作系统的分类：操作系统可以根据其功能、用途和支持的计算机体系结构进行分类。以下是一些常见的操作系统分类：\n\n批处理操作系统：这种操作系统主要用于处理批量任务，用户将一批作业提交给操作系统，系统按照一定的顺序自动执行这些作业，无需用户交互。\n\n分时操作系统：这种操作系统可以同时为多个用户提供服务，每个用户通过终端或网络连接到主机，可以交互地使用计算机资源。\n\n实时操作系统：这种操作系统对任务的响应时间有严格要求，需要及时处理来自外部设备的事件和数据，常用于嵌入式系统、航空航天等领域。\n\n网络操作系统：这种操作系统用于管理和控制网络中的计算机和设备，提供网络通信和资源共享的功能。\n\n分布式操作系统：这种操作系统在多台计算机上运行，通过网络进行通信和协调，以实现分布式计算和资源共享。\n\n\n\n操作系统的结构模型：操作系统的结构模型可以分为两种常见的类型：单内核结构和微内核结构。\n\n单内核结构：这种结构模型将操作系统的核心功能以及大部分系统服务作为一个单一的紧密集成的内核来实现。内核负责管理硬件、进程调度、内存管理、文件系统等核心任务。常见的单内核结构操作系统包括Windows和Linux。\n\n微内核结构：这种结构模型将操作系统的核心功能分为若干相互独立的模块，其中只有最基本的功能放在内核中，其他功能通过模块以服务的形式运行。微内核只提供最基本的通信和调度机制，模块之间通过消息传递进行通信。常见的微内核结构操作系统包括Minix和QNX。\n\n\n这些结构模型都有各自的优势和适用场景，选择适合的结构模型取决于操作系统设计的目标和需求。\n\n\n第二章\n作业控制接口的基本概念和分类：作业控制接口是操作系统提供给用户或应用程序的一组功能接口，用于管理和控制作业的执行。作业控制接口可以包括以下几个基本概念和分类：\n\n进程控制：进程控制是作业控制接口的主要功能之一，它包括创建新进程、终止进程、等待进程结束、获取和修改进程状态等操作。\n\n进程间通信：作业控制接口提供了进程间通信的机制，使得多个进程可以进行数据交换和协作。常见的进程间通信方式包括管道、消息队列、共享内存和信号量等。\n\n资源分配和管理：作业控制接口提供了资源分配和管理的功能，包括分配和释放内存、文件和设备的操作，以及管理进程的资源使用情况。\n\n进程调度：作业控制接口可以用于设置和调整进程的优先级和调度策略，以实现合理的进程调度和资源利用。\n\n错误处理：作业控制接口提供了处理错误和异常情况的功能，包括错误码的返回、错误处理程序的注册和执行等。\n\n\n\nLinux 系统的 Shell 常用命令：Linux 操作系统使用 Shell（命令行解释器）作为用户与操作系统交互的接口。以下是一些常用的 Linux Shell 命令：\n\ncd：切换当前工作目录。\nls：列出当前目录中的文件和子目录。\npwd：显示当前工作目录的路径。\nmkdir：创建一个新目录。\nrm：删除文件或目录。\ncp：复制文件或目录。\nmv：移动文件或目录，或者对文件重命名。\ncat：连接文件并打印到标准输出。\ngrep：在文件中搜索指定的模式。\nchmod：修改文件或目录的权限。\nchown：修改文件或目录的所有者。\nchgrp：修改文件或目录的所属组。\ntar：打包和解包文件。\ngzip：压缩文件。\nunzip：解压缩文件。\nssh：通过安全的 shell 连接到远程计算机。\nman：查看命令的帮助文档。\n\n这只是一小部分 Linux Shell 命令，Linux 操作系统提供了丰富的命令和工具来满足各种需求。可以使用命令的 man 页面（例如，man ls）获取更多关于特定命令的详细信息。\n\n\n第三章\n程序、进程、线程的定义与区别：\n\n程序：程序是一组指令的集合，描述了实现特定任务的算法和逻辑。它是静态的，存储在磁盘或其他存储介质中，只有在执行时才变成进程。\n\n进程：进程是程序在执行过程中的实例。它是操作系统分配资源和执行任务的基本单位。进程拥有独立的内存空间和系统资源，并且可以与其他进程进行通信。\n\n线程：线程是进程内的一个执行单元，一个进程可以拥有多个线程。线程共享进程的内存空间和资源，可以并发执行。线程是轻量级的，创建和切换线程的开销相对较小。\n\n\n区别：\n\n程序是静态的代码集合，进程是程序在执行过程中的实例，而线程是进程内的执行单元。\n进程拥有独立的内存空间和系统资源，线程共享进程的内存空间和资源。\n进程之间的切换开销较大，而线程之间的切换开销较小。\n进程间通信需要使用特定的机制，如管道、消息队列等，而线程可以直接共享内存进行通信。\n进程是相互独立的，一个进程的崩溃不会影响其他进程，而线程是依赖于进程的，一个线程的崩溃可能导致整个进程崩溃。\n\n\n进程的特性、状态：\n\n特性：\n动态性：进程是动态产生和消亡的。\n并发性：多个进程可以同时执行，通过进程调度实现。\n独立性：进程有独立的内存空间和资源，相互之间不受影响。\n异步性：进程的执行是不可预测的，可能由外部事件触发。\n\n\n状态：\n创建（New）：进程正在被创建。\n就绪（Ready）：进程已被创建，但等待系统分配资源。\n运行（Running）：进程正在执行。\n阻塞（Blocked）：进程暂停执行，等待某个事件发生。\n终止（Terminated）：进程执行完成或被终止。\n\n\n\n\n进程的控制：进程的控制包括创建、终止、等待和同步等操作。\n\n创建进程：通过调用系统调用，操作系统可以创建新的进程。\n终止进程：进程执行完毕或发生异常时，可以通过系统调用终止\n\n\n\n进程。\n\n等待进程：一个进程可以等待另一个进程执行完毕。\n进程同步：进程间可以通过信号量、管程、消息队列等机制进行同步，保证数据的一致性和进程的正确执行。\n\n\n线程的分类：\n用户线程：用户线程是由用户级线程库管理的线程，操作系统对其无感知。用户线程的创建、调度和同步都由用户程序控制，适用于轻量级任务和线程间通信较少的场景。\n内核线程：内核线程由操作系统内核管理，操作系统可以直接调度和管理内核线程。内核线程的创建、调度和同步由操作系统提供的线程库或内核调用实现，适用于需要操作系统参与管理的场景。\n轻量级进程（LWP）：轻量级进程是在内核线程之上的一层抽象，提供了更轻量级的线程管理。LWP可以由用户线程或内核线程调用，是用户级线程和内核线程之间的桥梁。\n\n\n\n第四章\n进程同步与互斥的相关基本概念：\n\n进程同步：进程同步是指多个并发执行的进程在执行过程中按照一定的顺序进行协调和合作，以保证数据的一致性和进程的正确执行。进程同步用于解决多个进程访问共享资源时可能出现的冲突和竞争条件问题。\n\n互斥：互斥是指多个进程或线程对共享资源的访问进行排他性控制，同一时间只允许一个进程或线程访问共享资源。通过互斥机制可以避免多个进程同时修改共享资源而导致的数据不一致性问题。\n\n\n\n经典进程同步的方法：四种\n\n互斥量（Mutex）：互斥量是一种常用的同步原语，用于保护共享资源。只有获取到互斥量的进程或线程才能访问共享资源，其他进程或线程需要等待互斥量的释放。\n\n信号量（Semaphore）：信号量是一种计数器，用于控制多个进程对共享资源的访问。通过对信号量的操作，进程可以进行等待（P操作）和释放（V操作），进而实现进程间的同步和互斥。\n\n条件变量（Condition Variable）：条件变量用于在多个进程之间传递信息，以实现进程的同步。一个进程可以等待条件变量满足某个条件（等待操作），而其他进程可以通过发出信号来通知等待的进程（唤醒操作）。\n\n读写锁（Read-Write Lock）：读写锁用于控制对共享资源的读和写操作。多个进程或线程可以同时读取共享资源，但只有一个进程或线程能够进行写操作，以确保数据的一致性和并发性。\n\n\n\n进程通信的常用方式：\n\n管道（Pipe）：管道是一种半双工的通信方式，用于在父进程和子进程之间传递数据。它可以实现单向的数据流动。\n\n消息队列（Message Queue）：消息队列是一种消息传递机制，用于在不同进程之间传递和接收消息。消息队列可以实现进程间的异步通信。\n\n共享内存（Shared Memory）：共享内存是一种高效的进程通信方式，多个进程可以通过映射到相同的内存区域来实现数据共享。\n\n套接字（Socket）：套接字是一种网络编程接口，可用于在不同主机上的进程\n\n\n\n\n之间进行通信。套接字可以实现进程间的远程通信。\n\n信号（Signal）：信号是一种异步的通知机制，用于在进程间传递简单的消息。一个进程可以发送信号给另一个进程，接收方进程可以对信号进行相应的处理。\n\n   这些是进程通信的常用方式，每种方式都有其适用的场景和特点，根据具体需求选择合适的通信方式。\n第五章\n进程和作业调度的相关概念：\n\n进程调度：进程调度是操作系统中的一项重要功能，它决定了在多个就绪态进程中选择哪个进程执行，并分配处理器资源给选定的进程。进程调度算法决定了进程调度的策略和规则。\n\n作业调度：作业调度是指在批处理系统中，根据作业的特性和系统资源的情况，决定哪些作业将被调入内存并分配处理器资源进行执行。\n\n\n\n常用的调度算法：前五种，计算周转时间：\n\n先来先服务调度（FCFS）：按照进程到达的顺序进行调度，即先到达的进程先执行。\n\n最短作业优先调度（SJF）：选择执行时间最短的进程优先执行，以减少平均等待时间。\n\n优先级调度：为每个进程分配一个优先级，并按照优先级的高低进行调度。\n\n时间片轮转调度：将处理器时间划分为固定大小的时间片，每个进程按照时间片轮流执行。\n\n多级反馈队列调度：将进程分为多个优先级队列，每个队列使用不同的调度算法，并按照优先级进行轮转调度。\n\n周转时间（Turnaround Time）：指一个进程从进入系统到完成执行的时间。计算周转时间是为了评估调度算法的性能，周转时间越短表示进程执行效率越高。\n\n\n\n实时调度的相关概念和方法：\n\n实时调度：实时调度是针对实时系统的调度算法，其中任务的及时响应是至关重要的。实时系统要求任务能够在特定的时间限制内完成，以满足实时性要求。\n\n硬实时调度：对于硬实时系统，任务必须在其截止时间之前完成。\n\n软实时调度：对于软实时系统，任务完成的时间是重要的，但不是绝对必须在截止时间之前完成。\n\n实时调度算法：常见的实时调度算法包括最早截止时间优先（EDF）、最短剩余时间优先（SRTF）和固定优先级调度算法（Fixed-Priority Scheduling）等。这些算法根据任务的截止时间、执行时间和优先级来确定任务的执行顺序。\n\n抢占式调度：在实时系统中，抢占式调度是指高优先级任务可以中断正在执行的低优先级任务，并立即开始执行。这样\n\n\n\n\n可以保证高优先级任务在截止时间之前得到及时处理。\n   实时调度算法和方法旨在满足实时系统的时间约束和任务优先级的要求，确保系统能够及时响应和处理实时任务。\n第六章\n死锁的相关概念：\n\n死锁：死锁是指在并发系统中，两个或多个进程因争夺系统资源而被永久地阻塞，无法继续执行，导致系统无法前进的状态。\n\n资源：资源可以是系统中的任何可供进程使用的实体，如打印机、磁盘空间、内存等。\n\n互斥：互斥是指一个资源一次只能被一个进程使用，即同时只能有一个进程访问该资源。\n\n持有和等待：一个进程持有一个资源，并在等待其他进程持有的资源。\n\n不可抢占：资源不能被强制从持有者手中抢占，只能在其主动释放后才能被其他进程获取。\n\n\n\n死锁的预防方法：\n\n破坏互斥条件：允许多个进程同时访问资源，或将某些资源设计成可共享的。\n\n破坏持有和等待条件：要求进程在请求资源之前释放已持有的资源。\n\n破坏不可抢占条件：允许抢占资源，当一个进程请求资源时，如果无法立即获取，可以暂时释放已持有的资源。\n\n破坏循环等待条件：对资源进行全局排序，并要求进程按照特定的顺序请求资源。\n\n\n\n死锁的避免：\n\n安全状态检测：通过检查系统资源分配情况来判断是否存在安全序列，如果存在安全序列，则可以继续分配资源；如果不存在安全序列，则可能存在死锁，需要采取相应的措施避免死锁。\n\n银行家算法：银行家算法是一种资源分配算法，通过预先分配资源和安全性检查，保证系统在分配资源时不会进入不安全状态。银行家算法假设进程在开始执行之前声明其最大资源需求量，并根据系统当前资源分配情况进行安全性检查。\n\n\n\n\n死锁是多进程并发执行中的一种严重问题，可以采取预防和避免策略来减少死锁的发生和影响。预防策略着重于消除死锁发生的条件，而避免策略则通过动态地分配资源来避免进入不安全状态。\n第七章\n存储器管理的相关基本概念：\n\n存储器（Memory）：存储器是计算机系统中用于存储数据和程序的设备，也被称为主存或内存。它提供了快速读写访问的能力。\n\n内存单元（Memory Unit）：内存被划分为若干个大小相等的存储单元，每个存储单元称为内存单元。每个内存单元都有唯一的地址。\n\n内存分配（Memory Allocation）：内存分配是指将进程所需的内存空间分配给进程，以便进程能够存储数据和执行程序。\n\n内存回收（Memory Deallocation）：内存回收是指在进程结束或释放内存空间时，将该内存空间返还给系统，以便其他进程可以使用。\n\n外部碎片（External Fragmentation）：由于内存分配和回收的不连续性，导致已分配的内存块之间存在未使用的空闲空间，称为外部碎片。\n\n内部碎片（Internal Fragmentation）：在内存分配时，由于所分配的内存块大小大于进程所需的实际内存空间大小，导致内存块内部存在未被利用的空闲空间，称为内部碎片。\n\n\n\n连续与离散分配的存储管理方式：\n\n连续分配（Contiguous Allocation）：连续分配是将主存划分为若干个连续的区域，每个区域分配给一个进程。常见的连续分配方式包括单一连续分配、固定分区分配和可变分区分配。\n\n离散分配（Non-contiguous Allocation）：离散分配是将主存中的空闲区域划分为多个独立的块，每个块可以分配给一个进程。常见的离散分配方式包括页式存储管理和段式存储管理。\n\n页式存储管理（Paging）：页式存储管理将进程的地址空间和主存空间划分为固定大小的页和页框，并使用页表将逻辑地址转换为物理地址。页式存储管理消除了外部碎片，但可能会引入内部碎片。\n\n段式存储管理（Segmentation）：段式存储管理将进程的地址空间划分为多个不同大小的段，每个段都有唯一的标识符。段表用于将逻辑地址转换为物理地址。段式存储管理能够提供更好的地址空间管理灵活性，但可能会产\n\n\n\n\n生外部碎片。\n   连续分配和离散分配是不同的存储管理方式，每种方式都有其优缺点和适用场景。根据系统的需求和资源特点，选择合适的存储管理方式。\n第八章\n虚拟存储器管理的相关概念：\n\n虚拟存储器（Virtual Memory）：虚拟存储器是一种将辅助存储器（如硬盘）作为主存的扩展，使得用户程序可以访问比实际主存更大的地址空间。虚拟存储器将主存分为固定大小的块（页或段），并将进程的地址空间分为相同大小的块。\n\n页面（Page）：在分页式虚拟存储管理中，主存和辅助存储器被划分为固定大小的块，每个块称为页面。\n\n分段（Segment）：在分段式虚拟存储管理中，进程的地址空间被划分为多个不同大小的段，每个段表示一个逻辑单位。\n\n页表（Page Table）：页表是一种数据结构，用于映射逻辑地址到物理地址。页表中的每个表项记录了逻辑页面和物理页面之间的映射关系。\n\n地址转换：通过页表或段表进行地址转换，将逻辑地址转换为物理地址。\n\n\n\n分页式和分段式存储管理方式：\n\n分页式存储管理：分页式存储管理将进程的地址空间和物理内存划分为固定大小的页面，将逻辑地址转换为物理地址需要使用页表进行映射。\n\n分段式存储管理：分段式存储管理将进程的地址空间划分为不同大小的段，每个段具有唯一的标识符，逻辑地址由段号和段内偏移量组成。\n\n\n\n置换算法：\n\n先进先出（FIFO）算法：选择最早进入内存的页面进行置换。\n\n最佳置换（OPT）算法：选择未来最长时间不会被访问的页面进行置换。\n\n最近最久未使用（LRU）算法：选择最长时间未被访问的页面进行置换。\n\n时钟（Clock）算法：使用一个指针循环扫描内存中的页面，如果页面的访问位为0，则选择该页面进行置换，如果访问位为1，则将访问位置为0，继续扫描。\n\n中断次数（Page Fault）：中断次数表示在程序执行过程中发生页面置换的次数。\n\n中断率（Page Fault Rate）：中断率是指发生页面置换的次数与总访问次数之比，反映了页面置换的频率。\n\n\n\n\n置换算法用于确定哪些页面将被置换出内存以腾出空间给新的页面，以提高内存利用\n效率。不同的置换算法具有不同的策略和性能特点，可以根据系统需求选择适合的置换算法。中断次数和中断率是衡量页面置换效果的指标。\n第九章\n设备管理的相关概念：\n\n设备（Device）：设备是指计算机系统中的硬件设备，如磁盘驱动器、打印机、键盘等。\n\n设备控制器（Device Controller）：设备控制器是设备和计算机系统之间的接口，负责管理设备的操作和与设备进行通信。\n\n设备驱动程序（Device Driver）：设备驱动程序是操作系统中的软件模块，用于与设备控制器进行通信和管理设备。\n\n设备队列（Device Queue）：设备队列是存储等待设备操作的进程或作业的数据结构，按照先来先服务（FCFS）或其他调度算法进行排队。\n\n中断（Interrupt）：中断是指由设备发出的信号，用于通知操作系统某个设备需要处理。\n\n\n\nI&#x2F;O系统的组成和控制方式：\n\nI&#x2F;O系统的组成：I&#x2F;O系统由以下组成部分构成：\n\n用户程序：执行I&#x2F;O操作的应用程序。\nI&#x2F;O缓冲区：用于在主存和设备之间传输数据的缓冲区。\n设备驱动程序：与设备控制器通信的软件模块。\n设备控制器：负责管理设备的操作和与设备通信的硬件模块。\n设备：计算机系统中的外部硬件设备。\n\n\nI&#x2F;O系统的控制方式：I&#x2F;O系统的控制方式包括以下几种：\n\n程序控制方式：由用户程序直接控制I&#x2F;O操作，程序需要负责处理设备的启动、停止和错误处理。\n中断驱动方式：设备发出中断信号，通知操作系统某个设备需要处理，操作系统在收到中断后进行相应的设备操作处理。\n直接存储器访问（DMA）方式：设备控制器直接与主存进行数据传输，减轻了CPU的负担，提高了数据传输的效率。\n\n\n\n\n\nI&#x2F;O系统负责管理计算机系统中的设备和数据的输入输出，通过适当的控制方式和组件，实现数据在主存和设备之间的高效传输和处理。\n第十章\n文件系统的相关概念：\n\n文件系统（File System）：文件系统是操作系统中负责管理和组织文件的软件和数据结构。它定义了文件的命名规则、存储结构、访问方式和文件的操作方法。\n\n文件（File）：文件是计算机系统中存储数据的基本单位。它可以是文本文件、图像文件、音频文件等各种类型的数据。\n\n目录（Directory）：目录是用于组织和管理文件的数据结构，它可以包含文件和其他目录。\n\n文件属性（File Attribute）：文件属性是描述文件特征的元数据，包括文件名、大小、创建时间、访问权限等信息。\n\n文件操作（File Operation）：文件操作包括创建、打开、读取、写入、关闭、删除等对文件进行的各种操作。\n\n\n\n文件的逻辑结构：\n\n顺序文件（Sequential File）：顺序文件是将数据按照顺序存储在文件中，每个记录的位置取决于前一个记录的位置。\n\n索引文件（Indexed File）：索引文件使用一个索引表来存储记录的位置信息，可以通过索引快速访问文件中的记录。\n\n随机文件（Random Access File）：随机文件允许直接根据记录的关键字或位置进行访问，可以随机读取和写入文件中的记录。\n\n\n\n文件存储空间的管理：\n\n空闲表法（Free Space Table）：使用一个表来记录存储空间中的空闲块，每个块的大小相同。当需要分配空间时，在表中找到一个合适大小的空闲块进行分配。\n\n链表法（Linked List）：使用链表来组织存储空间中的空闲块。每个块包含一个指针指向下一个空闲块，分配空间时遍历链表找到合适大小的块进行分配。\n\n位示图法（Bit Map）：使用位示图来表示存储空间中的每个块的状态，例如，0表示空闲，1表示已分配。分配空间时，在位示图中找到一个空闲位进行分配。\n\n\n\n\n文件存储空间的管理方法用于管理磁盘或其他存储介质上的空闲空间，以便有效地存储和检索文件。这些方法根据不同的数据结构和算法选择合适的方式来管理存储空间。\n","categories":["操作系统"],"tags":["test"]},{"title":"树莓派初始化","url":"/2023/05/20/Rpi-init/","content":"不用显示器,网线配置树莓派\n树莓派主打的就是一个轻巧，连显示器太费劲，故利用vnc远程桌面控制。先用树莓派官方刷机工具设置好ssh和wifi，在ssh上树莓派进行桌面配置。\n1.刷写Ubuntu Server镜像(1)烧录软件: Raspberry Pi OS若烧录完成后无法正常识别,请核对镜像版本(树莓派为aarch64架构,区别于其它amd64,mac等),或更换tf卡(可能tf卡能够正常读写文件,但不能作系统引导盘)\n(2)选择烧录镜像和存储卡(在other os里选择Ubuntu 22.04 服务端为例)选择烧录系统为2204的服务端后，点击界面右下角出现的设置按钮开启ssh选项，设置用户名，密码等，配置好预连接网络，本次用手机热点设置\n2.网络配置(1)用ssh连接树莓派打开手机热点，开启树莓派，树莓派会自动连接预设置好的手机热点，手机上查看树莓派ip地址将电脑连至同一热点，用ssh连接树莓派ssh工具下载:Mobaxterm  \n(2)配置WiFi如下代码配置：\ncd /etc/netplan\n#进入netplan配置目录\nsudo vi 50-cloud-init.yaml\n#修改配置文件\n\n  \nnetwork:\nversion: 2\nwifis:\n    renderer: networkd\n    wlan0:\n        access-points:\n            &quot;yourwifiname&quot;:\n                password: &quot;yourpassword&quot;\n        dhcp4: no\n        optional: true\n        addresses: [yourip/24]\n        routes:\n          - to: default\n            via: 192.168.1.1\n        nameservers:\n          addresses: [192.168.1.1]\n\n配置完yaml文件后，应用配置：\nsudo netplan try\nsudo netplan apply\n\n3.配置远程桌面(1)安装桌面环境sudo apt install xfce4 xfce4-goodies\n\n(2)安装远程桌面","categories":["树莓派"],"tags":["ssh","vnc"]},{"title":"Vi操作方式","url":"/2023/04/15/Vi-OP/","content":"vi编辑器的常用命令\n简介要对服务器上的文件进行简单的修改，可用ssh远程登录到服务器上，并且使用vi进行快速的编辑即可。在非图形界面的环境下，编辑文件，vi是一个合适的选择。\nvi 是“Visual interface”的简称，是Linux中最经典的文本编辑器，vi的核心设计思想——让程序员的手指始终保持在键盘的核心区域，就能完成所有的编辑操作。\nvim &#x3D; vi improved vim 是从 vi 发展出来的一个文本编辑器，支持代码补全，编译，错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用，被称为编辑器之神。\n1.打开和新建文件$ vi 文件名\n\n打开文件并且定位行\n$ vi 文件名 +行数\n\n2.异常处理如果vi异常退出，在磁盘上可能会保存有交换文件按下字母d删除交换文件即可  \n\n3.vi 的三种工作模式（1）命令模式：打开文件首先进入命令模式，是使用 vi 的入口，通过命令对文件进行常规的编辑操作。\n（2）编辑模式：正常的编辑文字。\n（3）末行模式：执行保存、退出等操作，要退出 vi 返回到控制台，需要在末行模式下输入命令，末行模式是 vi 的出口。\n末行模式命令\n\n\n命令\n英文\n功能\n\n\n\nw\nwrite\n保存\n\n\nq\nquit\n退出\n\n\nq!\nquit\n强制退出\n\n\nwq\nwrite&amp;quit\n保存并退出\n\n\nx\n\n保存并退出\n\n\n移动命令\n参考目录\nhttps://zhuanlan.zhihu.com/p/401071229\n\n","categories":["操作系统"],"tags":["Linux"]},{"title":"WIN下的Linux子系统配置","url":"/2023/04/14/WSL-desktop/","content":"WIN下的Linux子系统配置\n1.在Win10环境下安装Ubuntu (WSL)2.配置WSL (换源)3.安装桌面环境4.启动桌面\n参考目录:\nhttps://www.jianshu.com/p/9fdea59ae8a2\n\n","categories":["操作系统"],"tags":["Win","Ubuntu"]},{"title":"无线网络配置(Linux)","url":"/2023/04/13/Ubuntu-netplan/","content":"命令行配置Linux无线网络工具：Netplan （一个在某些 Linux 发行版上配置网络连接的命令行工具）\n1.进入目录netplan$ cd /etc/netplan\n$ sudo vi 50-cloud-init.yaml\n\n2.修改配置文件(建议先备份)network:\n    ethernets:\n        eth0:\n            dhcp4: true\n            optional: true\n    version: 2\n    wifis:\n        wlan0:\n            optional: true\n            access-points:\n                &quot;WifiName&quot;:\n                    password: &quot;WifiPass&quot;\n        dhcp4: true\n#注意代码缩进\n\n3.应用修改配置$ sudo netplan -debug try\n#检验\n$ sudo netplan -debug generate\n#构建\n$ sudo netplan -debug apply\n#应用\n\n4.验证修改$ sudo reboot\n#重启\n$ifconfig\n#查看连接网络\n\n\n参考目录：\nhttps://blog.csdn.net/weixin_43869959/article/details/115710129\n\n","categories":["操作系统"],"tags":["Linux"]},{"title":"远程桌面(VNC)","url":"/2023/04/12/SSH-VNC/","content":"树莓派4B远程桌面配置\n1.准备ssh服务sudo apt install openssh-server\nsudo systemctl status ssh.service \n# 确认是否开机自启动\nsudo systemctl is-enabled ssh.service\n\n安装图形界面(可选)建议安装Xfce，以具有sudo特权的用户身份输入以下命令：\nsudo apt update\nsudo apt install xfce4 xfce4-goodies\n\n2.安装服务端Ubuntu 20.04存储库中有几种不同的VNC服务器，例如TightVNC、TigerVNC和x11vnc。每个VNC服务器在速度和安全性方面都有各自的优缺点。本次选用tigervnc为例。\nsudo apt install tigervnc-standalone-server\n#安装vncsever\n\n基础设置\nvncserver\n#过程中会让你设置密码和只读密码, 自动分配端口号。\n#密码文件存储在~/.vnc目录中，如果不存在则创建该目录。\n##上面启动的服务, 默认是只监听本地127.0.0.1, 其它机器无法连接, 若需要连接, 可以用下面命令启动\n\n运行测试\n#查看启动后的实例\n$ vncserver -list\nTigerVNC server sessions:\nX DISPLAY #\tRFB PORT #\tRFB UNIX PATH\tPROCESS ID #\tSERVER\n2         \t5902      \t             \t11368       \tXtigervnc\n#如果-list看不到实例，说明启动失败。可以用journalctl -fe看一下具体原因。\n\n修改密码\nvncpasswd\n#修改密码\n\n3.配置和添加系统服务vncserver -kill :2\n关闭刚才的实例 :2 根据自己的实例修改\n\nsudo systemctl start tigervncserver@:2.service\nsudo systemctl enable tigervncserver@:2.service\n将 tigervncservice 服务添加到启动, :2根据自己的实例修改\n\n服务配置文件在 /lib/systemd/system/tigervncserver@.service\n使用 /usr/libexec/tigervncsession-start 这个脚本\n脚本调用 /usr/sbin/tigervncsession\n\n需要在~&#x2F;.vnc&#x2F;下创建文件config并输入以下内容：\nsession=ubuntu\n#如果前面安装了xfce, 这里可以用xfce, 否则需要改成ubuntu(Desktop版自带桌面)\ngeometry=1366x768\n#开启时的默认分辨率\nsecuritytypes=vncauth,tlsvnc\n#如果要只允许本地连接, 可以加一行 localhost\n\n重启服务后生效\nsudo systemctl restart tigervncser#  #ver@:2.service\n\n4.启动VNC(可从任意位置访问)vncserver -localhost no -geometry 1280x720 -depth 24\n\n5.使用工具连接本次选用Mobaxterm。\n下载地址：https://mobaxterm.mobatek.net/download-home-edition.html\n\n\n参考目录：\nhttps://www.howtoforge.com/how-to-install-vnc-server-ubuntu-22-04/\nhttps://www.linuxbuzz.com/install-configure-vnc-ubuntu-server/\nhttps://www.cnblogs.com/milton/p/16730512.html\nhttps://www.cnblogs.com/liyuanhong/articles/15487147.html\n\n","categories":["操作系统"],"tags":["SSH"]},{"title":"帮助页面","url":"/2023/04/11/hello-world/","content":"欢迎来到 Hexo!检查 文档 获取更多信息，如果在使用Hexo时遇到问题，你可以在 troubleshooting找到答案，或者你可以咨询 GitHub.\n快速开始创建帖子$ hexo new &quot;Post Name&quot;\n\n更多信息: Writing\n启动服务$ hexo server\n\n更多信息: Server\n生成文件$ hexo generate\n\n更多信息: Generating\n部署到站点$ hexo deploy\n\n更多信息: Deployment\n","categories":[],"tags":[]}]